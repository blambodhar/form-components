@import "base";

/*******************************************************************************
 * Contextual classes:
 * - is-disabled: When input is disabled
 * - is-filled-in: When value is available or the user clicked into the input
 * - is-tabbed: When the input is focused by tabbing (a11y)
 * - is-focused: When the input is focused
 * - is-initialized: When the JS for the component is initialized
 * - has-no-label: If there is no label available
 ******************************************************************************/
// font settings
$textAreaLabelFontSize: 1.125rem;
$textAreaLabelFontSizeFilledIn: 0.75rem;
$textAreaLabelFontFamily: inherit;
$textAreaFontSize: 1.125rem;
$textAreaLineHeight: 1.375rem;
$textAreaFontFamily: inherit;

// size settings
$textAreaHeight: $textAreaLineHeight * 5;
$textAreaPaddingX: 15px;
$textAreaPaddingY: 10px;
$textAreaLabelSpacing: 5px;
$textAreaBorderRadius: 2px;

// need to use string here due to:
// https://github.com/webpack-contrib/sass-loader/issues/487
$variants: "dark", "light";
@each $color in $variants {
  @if $color == "light" {
    // color settings
    $textAreaWrapperBorderColor: $black !global;
    $textAreaBorderBottomColor: $black !global;
    $textAreaBackgroundColor: transparent !global;
    $textAreaColor: $black !global;
    $textAreaLabelColor: $black !global;
    $textAreaLabelColorFilledIn: $black !global;
    $textAreaErrorColor: $red !global;
    $textAreaFocusBorderColor: #95a5a6 !global;
  } @else {
    // color settings
    $textAreaWrapperBorderColor: $white !global;
    $textAreaBorderBottomColor: $white !global;
    $textAreaBackgroundColor: transparent !global;
    $textAreaColor: $white !global;
    $textAreaLabelColor: $white !global;
    $textAreaLabelColorFilledIn: $white !global;
    $textAreaErrorColor: $red !global;
    $textAreaFocusBorderColor: #95a5a6 !global;
  }

  /*****************************************************************************
   * General
   ****************************************************************************/
  .text-area {
    $block: &;

    &--#{unquote($color)} {

      &.is-tabbed {
        outline: 1px solid $textAreaFocusBorderColor;
        outline-offset: 3px;
      }

      #{$block}__wrapper {
        position: relative;
        width: 100%;
        border: 1px solid $textAreaWrapperBorderColor;
        padding: 1px;
        box-sizing: border-box;
        border-radius: $textAreaBorderRadius;
      }

      &.is-focused #{$block}__wrapper {
        border-width: 2px;
        padding: 0;
      }

      /*************************************************************************
       * Input
       ************************************************************************/
      #{$block}__input {
        border: none;
        cursor: text;
        display: block;
        height: calc(#{$textAreaHeight} + #{$textAreaLabelFontSizeFilledIn} + (#{$textAreaPaddingY} * 2) + #{$textAreaLabelSpacing});
        line-height: $textAreaLineHeight;
        box-sizing: border-box;
        padding: calc(#{$textAreaLabelFontSizeFilledIn} + #{$textAreaPaddingY} + #{$textAreaLabelSpacing}) #{$textAreaPaddingX} #{$textAreaPaddingY} #{$textAreaPaddingX};
        background: $textAreaBackgroundColor;
        font-size: $textAreaFontSize;
        font-family: $textAreaFontFamily;
        resize: none;
        border-radius: $textAreaBorderRadius;
        width: 100%;

        &:focus {
          outline: none;
        }
      }
      &.is-disabled #{$block}__input {
        cursor: not-allowed;
      }

      /*************************************************************************
       * Label (will be moved to top when value available)
       ************************************************************************/
      #{$block}__label {
        position: absolute;
        top: calc(#{$textAreaLabelFontSizeFilledIn} + #{$textAreaPaddingY});
        left: 0;
        height: $textAreaHeight;
        line-height: $textAreaLineHeight;
        width: 100%;
        box-sizing: border-box;
        cursor: text;
        padding: 0 $textAreaPaddingX;
        font-size: $textAreaLabelFontSize;
        font-family: $textAreaLabelFontFamily;
        color: $textAreaLabelColor;
        user-select: none;
        background-color: transparent;
        transform: translateY(0);
        @include transition("transform .275s", "height .275s", "font-size .275s", "color .275s", "line-height .275s");
      }
      // NOTE: We need to use two selectors here, as otherwise it won't work in
      // Firefox. Mixins aren't allowed inside @each directives, so we can only
      // use redundant code in these two selectors
      // NOTE: Also trigger this style when the text field isn't initialized yet
      // to avoid label jumping when forms with filled-in values are loaded
      // via AJAX
      &.is-filled-in #{$block}__label,
      &:not(.is-initialized) #{$block}__label {
        transform: translateY(-#{$textAreaPaddingY});
        height: $textAreaLabelFontSizeFilledIn;
        font-size: $textAreaLabelFontSizeFilledIn;
        color: $textAreaLabelColorFilledIn;
        line-height: $textAreaLabelFontSizeFilledIn;
      }
      #{$block}__input:-webkit-autofill + #{$block}__label {
        // webkit autofill is used to remove the delay between Chrome, which
        // fills in predefined data, and JS that's being loaded
        transform: translateY(-#{$textAreaPaddingY});
        height: $textAreaLabelFontSizeFilledIn;
        font-size: $textAreaLabelFontSizeFilledIn;
        color: $textAreaLabelColorFilledIn;
        line-height: $textAreaLabelFontSizeFilledIn;
      }
      &.is-disabled #{$block}__label {
        cursor: not-allowed;
        user-select: none;
      }
      &.is-focused #{$block}__label {
        margin-top: -1px;
        margin-left: -1px;
      }

      /*************************************************************************
       * Error
       ************************************************************************/
      #{$block}__error {
        color: $textAreaErrorColor;
        margin: 5px 0;

        a {
          color: $textAreaErrorColor;
        }
      }
    }
  }
}
