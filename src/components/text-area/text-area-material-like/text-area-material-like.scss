@import "base";

/*******************************************************************************
 * Contextual classes:
 * - is-disabled: When input is disabled
 * - is-filled-in: When value is available or the user clicked into the input
 * - is-tabbed: When the input is focused by tabbing (a11y)
 * - is-focused: When the input is focused
 ******************************************************************************/
// font settings
$textAreaLabelFontSize: 1.125rem;
$textAreaLabelFontSizeFilledIn: 0.75rem;
$textAreaLabelFontFamily: inherit;
$textAreaFontSize: 1.125rem;
$textAreaFontFamily: inherit;
$textAreaLineHeight: $textAreaFontSize * 1.35;

// size settings
$textAreaHeight: $textAreaLineHeight * 5;
$textAreaPaddingX: 15px;
$textAreaPaddingY: 10px;
$textAreaBorderRadius: 2px;

// need to use string here due to:
// https://github.com/webpack-contrib/sass-loader/issues/487
$variants: "dark", "light";
@each $color in $variants {
  @if $color == "light" {
    // color settings
    $textAreaWrapperBorderColor: $black !global;
    $textAreaBorderBottomColor: $black !global;
    $textAreaBackgroundColor: transparent !global;
    $textAreaColor: $black !global;
    $textAreaLabelColor: $black !global;
    $textAreaLabelColorFilledIn: $black !global;
    $textAreaErrorColor: $red !global;
    $textAreaFocusBorderColor: #95a5a6 !global;
  } @else {
    // color settings
    $textAreaWrapperBorderColor: $white !global;
    $textAreaBorderBottomColor: $white !global;
    $textAreaBackgroundColor: transparent !global;
    $textAreaColor: $white !global;
    $textAreaLabelColor: $white !global;
    $textAreaLabelColorFilledIn: $white !global;
    $textAreaErrorColor: $red !global;
    $textAreaFocusBorderColor: #95a5a6 !global;
  }

  /*****************************************************************************
   * General
   ****************************************************************************/
  .text-area {
    $block: &;
    height: $textAreaHeight;

    &--#{unquote($color)} {

      &.is-tabbed {
        outline: 1px solid $textAreaFocusBorderColor;
        outline-offset: 3px;
      }

      #{$block}__wrapper {
        position: relative;
        width: 100%;
        border-width: 1px 1px 0 1px;
        border-style: solid;
        border-color: $textAreaWrapperBorderColor;
        padding-top: calc(#{$textAreaLabelFontSizeFilledIn} + #{$textAreaPaddingY} + 1px);
        padding-left: 1px;
        padding-right: 1px;
        box-sizing: border-box;
        border-radius: $textAreaBorderRadius;
      }

      &.is-focused #{$block}__wrapper {
        border-width: 2px 2px 0 2px;
        padding-top: calc(#{$textAreaLabelFontSizeFilledIn} + #{$textAreaPaddingY});
        padding-left: 0;
        padding-right: 0;
      }

      /*************************************************************************
       * Input
       ************************************************************************/
      #{$block}__input {
        border-width: 0 0 1px 0;
        border-style: solid;
        border-color: transparent transparent $textAreaBorderBottomColor transparent;
        cursor: text;
        display: block;
        height: $textAreaHeight;
        line-height: $textAreaLineHeight;
        // add 1 px additional padding to avoid text jumping when
        // border-bottom-width is set to 2px when focused
        padding: $textAreaPaddingY $textAreaPaddingX calc(#{$textAreaPaddingY} + 1px) $textAreaPaddingX;
        background: $textAreaBackgroundColor;
        color: $textAreaColor;
        box-sizing: border-box;
        width: calc(100% + 2px);
        margin-left: -1px;
        font-size: $textAreaFontSize;
        font-family: $textAreaFontFamily;
        resize: none;
        border-radius: $textAreaBorderRadius;

        &:focus {
          border-bottom-width: 2px;
          padding: $textAreaPaddingY $textAreaPaddingX;
        }
      }
      &.is-focused #{$block}__input {
        //margin-left: -1px;
      }
      &.is-disabled #{$block}__input {
        cursor: not-allowed;
      }

      /*************************************************************************
       * Label (will be moved to top when value available)
       ************************************************************************/
      #{$block}__label {
        position: absolute;
        top: calc(#{$textAreaLabelFontSizeFilledIn} + #{$textAreaPaddingY});
        left: 0;
        height: $textAreaHeight;
        line-height: $textAreaLineHeight;
        width: 100%;
        box-sizing: border-box;
        cursor: text;
        // a border and padding is necessary to have the same line height like
        // input
        border-bottom: 1px solid transparent;
        padding: 0 $textAreaPaddingX 1px $textAreaPaddingX;
        font-size: $textAreaLabelFontSize;
        font-family: $textAreaLabelFontFamily;
        color: $textAreaLabelColor;
        user-select: none;
        background-color: transparent;
        @include transition("top .275s", "height .275s", "font-size .275s", "color .275s", "line-height .275s");
      }
      // NOTE: We need to use two selectors here, as otherwise it won't work in
      // Firefox. Mixins aren't allowed inside @each directives, so we can only
      // use redundant code in these two selectors
      // NOTE: Also trigger this style when the text field isn't initialized yet
      // to avoid label jumping when forms with filled-in values are loaded
      // via AJAX
      &.is-filled-in #{$block}__label,
      &:not([data-is-initialized]) #{$block}__label {
        top: $textAreaPaddingY;
        height: $textAreaLabelFontSizeFilledIn;
        font-size: $textAreaLabelFontSizeFilledIn;
        color: $textAreaLabelColorFilledIn;
        line-height: $textAreaLabelFontSizeFilledIn;
      }
      #{$block}__input:-webkit-autofill + #{$block}__label {
        // webkit autofill is used to remove the delay between Chrome, which
        // fills in predefined data, and JS that's being loaded
        top: $textAreaPaddingY;
        height: $textAreaLabelFontSizeFilledIn;
        font-size: $textAreaLabelFontSizeFilledIn;
        color: $textAreaLabelColorFilledIn;
        line-height: $textAreaLabelFontSizeFilledIn;
      }
      &.is-disabled #{$block}__label {
        cursor: not-allowed;
        user-select: none;
      }
      &.is-focused #{$block}__label {
        margin-top: -1px;
        margin-left: -1px;
      }

      /*************************************************************************
       * Error
       ************************************************************************/
      #{$block}__error {
        color: $textAreaErrorColor;
        margin: 5px $textAreaPaddingX;

        a {
          color: $textAreaErrorColor;
        }
      }
    }
  }
}
